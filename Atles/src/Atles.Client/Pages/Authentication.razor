@page "/authentication/{action}"

@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

<RemoteAuthenticatorView Action="@Action">
    @*authentication/login
    <LoggingIn>
        <Loading />
    </LoggingIn>*@

    @*authentication/login-callback
    <CompletingLoggingIn>
        <Loading />
    </CompletingLoggingIn>*@

    @*authentication/login-failed
    <LogInFailed>
        <Loading />
    </LogInFailed>*@

    @*authentication/logout
    <LogOut>
        <Loading />
    </LogOut>*@

    @*authentication/logout-callback
    <CompletingLogOut>
        <Loading />
    </CompletingLogOut>*@

    @*authentication/logout-failed
    <LogOutFailed>
        <Loading />
    </LogOutFailed>*@

    @*authentication/logged-out
    <LogOutSucceeded>
        <Loading />
    </LogOutSucceeded>*@

    @*authentication/profile
    <UserProfile>
        <Loading />
    </UserProfile>*@

    @*authentication/register
    <Registering>
        <Loading />
    </Registering>*@
</RemoteAuthenticatorView>

@code{
    [Parameter] 
    public string Action { get; set; }
}

@*
    @page "/authentication/{action}"
    @inject IJSRuntime JS
    @inject StateContainer State
    @using Microsoft.AspNetCore.Components.WebAssembly.Authentication

    <RemoteAuthenticatorViewCore Action="@Action"
                                 TAuthenticationState="ApplicationAuthenticationState"
                                 AuthenticationState="AuthenticationState"
                                 OnLogInSucceeded="RestoreState"
                                 OnLogOutSucceeded="RestoreState" />

    @code {
        [Parameter]
        public string Action { get; set; }

        public ApplicationAuthenticationState AuthenticationState { get; set; } =
            new ApplicationAuthenticationState();

        protected async override Task OnInitializedAsync()
        {
            if (RemoteAuthenticationActions.IsAction(RemoteAuthenticationActions.LogIn,
                Action) ||
                RemoteAuthenticationActions.IsAction(RemoteAuthenticationActions.LogOut,
                Action))
            {
                AuthenticationState.Id = Guid.NewGuid().ToString();

                await JS.InvokeVoidAsync("sessionStorage.setItem",
                    AuthenticationState.Id, State.GetStateForLocalStorage());
            }
        }

        private async Task RestoreState(ApplicationAuthenticationState state)
        {
            if (state.Id != null)
            {
                var locallyStoredState = await JS.InvokeAsync<string>(
                    "sessionStorage.getItem", state.Id);

                if (locallyStoredState != null)
                {
                    State.SetStateFromLocalStorage(locallyStoredState);
                    await JS.InvokeVoidAsync("sessionStorage.removeItem", state.Id);
                }
            }
        }
    }
*@
